---
import { ClientRouter } from 'astro:transitions';
import BaseHead from '../components/BaseHead.astro';
import Nav from '../components/Nav.astro';
import Footer from '../components/Footer.astro';
import Search from '../components/Search.svelte';
import PostPreview from '../components/PostPreview.astro';
import siteConfig from '../data/site-config';
import { sortItemsByDateDesc } from '../utils/data-utils';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

// fetch & sort all posts at build time
const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);

// minimal shape for client-side search
const searchablePosts = posts.map(post => ({
  title: post.data.title,
  slug: post.filePath?.replace('src/content/blog/', '').replace('.mdx', '') ?? ''
}));
---

<!doctype html>
<html lang="en" class="antialiased break-words">
  <head>
    <BaseHead
      title={siteConfig.title}
      description={siteConfig.description}
      image={siteConfig.image}
    />
    <script>
      if (localStorage.theme === 'dark') document.documentElement.classList.add('dark');
    </script>
    <ClientRouter />
  </head>

  <body class="bg-main text-main">
    <div class="flex flex-col min-h-screen px-4 md:px-8">
      <Nav />

      <!-- Mobile search -->
      <div class="block md:hidden w-full mt-4 mb-8">
        <Search client:load posts={searchablePosts} />
      </div>

      <main class="grow w-full max-w-screen-xl mx-auto">
        <div class="flex flex-col md:flex-row">
          <!-- POSTS + CLIENT-SIDE PAGINATION -->
          <section class="flex-1 px-0 md:px-8">
            <!-- render all posts, then JS will hide/show -->
            {posts.map((post, i) => (
              <div data-index={i} class="post-item mb-10 md:mb-12">
                <PostPreview post={post} />
              </div>
            ))}

            <!-- pagination controls -->
            <nav
              id="pagination-container"
              class="my-16 md:my-24 flex flex-wrap items-center justify-center gap-2 max-w-full"
            ></nav>
          </section>

          <!-- SIDEBAR -->
          <aside class="w-full md:w-72 flex-none px-0 md:px-4 space-y-8 mt-8 md:mt-0">
            <!-- Desktop search -->
            <div class="hidden md:block">
              <Search client:load posts={searchablePosts} />
            </div>

            <div class="border border-black p-4">
              <h2 class="bg-black text-white text-center text-lg font-semibold py-1">
                Biografía
              </h2>
              <div class="flex flex-col items-center mt-4">
                <img
                  src="/miguel-grau-summary.jpg"
                  alt="Miguel María Grau Seminario"
                  class="w-24 h-24 rounded-full object-cover"
                />
                <h3 class="mt-4 text-center font-bold text-sm">
                  Miguel María Grau Seminario
                </h3>
                <p class="mt-2 text-justify text-sm leading-relaxed">
                  Fue un marino y militar peruano, almirante de la Marina de Guerra
                  del Perú. Durante la guerra del Pacífico, comandó el monitor
                  <i>Huáscar</i> y mantuvo a raya a la escuadra chilena durante cinco
                  meses, sucumbiendo finalmente de manera heroica en el combate naval
                  de Angamos.
                </p>
              </div>
            </div>

            <div class="border border-black p-4 overflow-hidden">
              <h2 class="bg-black text-white text-center text-lg font-semibold py-1 mb-3">
                Visítanos en Facebook
              </h2>
              <div
                class="fb-page w-full"
                style="height:130px; overflow:hidden;"
                data-href="https://www.facebook.com/Miguel.Grau.1834"
                data-tabs="timeline"
                data-small-header="true"
                data-adapt-container-width="true"
                data-hide-cover="false"
                data-show-facepile="false"
              >
                <blockquote
                  cite="https://www.facebook.com/Miguel.Grau.1834"
                  class="fb-xfbml-parse-ignore"
                >
                  <a href="https://www.facebook.com/Miguel.Grau.1834">
                    Miguel Grau
                  </a>
                </blockquote>
              </div>
            </div>
          </aside>
        </div>
      </main>
    </div>
    <Footer />

    <!-- Facebook SDK -->
    <script>
      // @ts-nocheck
      if (!window.fbAsyncInit) {
        window.fbAsyncInit = function() {
          FB.init({ xfbml: true, version: 'v16.0' });
        };
        (function(d, s, id) {
          var js,
            fjs = d.getElementsByTagName(s)[0];
          if (d.getElementById(id)) return;
          js = d.createElement(s);
          js.id = id;
          js.src = 'https://connect.facebook.net/en_US/sdk.js';
          fjs.parentNode.insertBefore(js, fjs);
        })(document, 'script', 'facebook-jssdk');
      }
    </script>

    <!-- Client-side pagination logic with ellipsis & Tailwind styling -->
    <script>
      // @ts-nocheck
      document.addEventListener('DOMContentLoaded', () => {
        const items = Array.from(document.querySelectorAll('.post-item'));
        const perPage = 10;
        const totalPages = Math.ceil(items.length / perPage);
        let currentPage = 1;
        const pager = document.getElementById('pagination-container');

        function showPage(page) {
          currentPage = page;
          const start = (page - 1) * perPage;
          const end = start + perPage;
          items.forEach((el, idx) => {
            el.style.display = idx >= start && idx < end ? '' : 'none';
          });
          renderPager();
        }

        function renderPager() {
          pager.innerHTML = '';

          // helpers
          const makeBtn = (text, disabled, onClick, isActive) => {
            const b = document.createElement('button');
            b.textContent = text;
            b.disabled = disabled;
            b.addEventListener('click', onClick);

            // base square styling
            const base = 'px-3 py-1 text-sm rounded-none cursor-pointer';

            // unselected: black border, transparent bg, black text
            const normal = 'border border-black bg-transparent text-black';

            // selected: solid black bg, white text
            const active = 'bg-black border-black text-white';

            // disabled appearance
            const disabledCls = 'opacity-50 cursor-not-allowed';

            // compose classes
            b.className = [
              base,
              isActive ? active : normal,
              disabled ? disabledCls : ''
            ].filter(Boolean).join(' ');

            return b;
          };

          const makeEllipsis = () => {
            const s = document.createElement('span');
            s.textContent = '…';
            s.className = 'px-2 text-gray-500';
            return s;
          };

          // Prev
          pager.appendChild(
            makeBtn('Anterior', currentPage === 1, () => showPage(currentPage - 1), false)
          );

          // page range calculation
          let startPage, endPage;
          if (totalPages <= 5) {
            startPage = 1;
            endPage = totalPages;
          } else if (currentPage <= 3) {
            startPage = 1;
            endPage = 5;
          } else if (currentPage >= totalPages - 2) {
            startPage = totalPages - 4;
            endPage = totalPages;
          } else {
            startPage = currentPage - 2;
            endPage = currentPage + 2;
          }

          // first page + ellipsis
          if (startPage > 1) {
            pager.appendChild(makeBtn(1, false, () => showPage(1), currentPage === 1));
            pager.appendChild(makeEllipsis());
          }

          // middle pages
          for (let i = startPage; i <= endPage; i++) {
            pager.appendChild(makeBtn(i, false, () => showPage(i), i === currentPage));
          }

          // ellipsis + last page
          if (endPage < totalPages) {
            pager.appendChild(makeEllipsis());
            pager.appendChild(
              makeBtn(totalPages, false, () => showPage(totalPages), currentPage === totalPages)
            );
          }

          // Next
          pager.appendChild(
            makeBtn('Siguiente', currentPage === totalPages, () => showPage(currentPage + 1), false)
          );
        }

        // initialize
        showPage(1);
        window.scrollTo({ top: 0 });
      });
    </script>
  </body>
</html>
